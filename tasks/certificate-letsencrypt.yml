---

## require ansible v2.2 for letsencrypt module

- set_fact:
    hardenwebserver_certinfo: '/C=US/ST=CA/L=San Francisco/O=Ansible'
    hardenwebserver_certduration: 1095
#    hardenwebserver_letsencrypt_acme_dir: 'https://acme-staging.api.letsencrypt.org/directory'
    hardenwebserver_letsencrypt_acme_dir: 'https://acme-v01.api.letsencrypt.org/directory'
    hardenwebserver_rootdir: /var/www/html
## Travis error: "asn1 encoding routines:ASN1_mbstring_ncopy:string too longi:a_mbstr.c:154:maxsize=64" as cn=testing-gce-4d114f77-0ff1-41fb-bd33-22879d3249da.c.eco-emissary-99515.internal
    certificate_cn: "{{ ansible_fqdn }}"

- name: apt | certificate packages dependencies
  apt: name={{item}} state=present update_cache=yes cache_valid_time=3600
  with_items:
    - ssl-cert
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
- name: install deps
  package: name=openssl state=present

#- set_fact:
#    certificate_cn: "www.{{ ansible_fqdn }}"

- name: ensure base directories exist
  file: dest={{ item }} state=directory mode=0755
  with_items:
    - "{{ ssl_privatedir }}"
    - "{{ ssl_dir }}"

- block:
    - name: creating letsencrypt user key
      shell: >
        openssl genrsa 4096 > {{ ssl_privatedir }}/user.key
            creates={{ ssl_privatedir }}/user.key
      register: userkey
#    - debug: var=userkey
    - name: export public user key
      shell: >
        openssl rsa -in {{ ssl_privatedir }}/user.key
            -pubout 
            > {{ ssl_privatedir }}/user.pub
            creates={{ ssl_privatedir }}/user.pub
    - name: ensure correct permissions of user key
      file: "dest={{ ssl_privatedir }}/user.key owner=root group={{ ssl_user }} mode=0440"
  when: hardenwebserver_letsencrypt_user_key is not defined or hardenwebserver_letsencrypt_user_key == ''

- name: generate certificate csr to submit
  command: >
    openssl req -sha256 -nodes -newkey rsa:4096
        -keyout {{ ssl_privatedir }}/{{ ansible_fqdn }}.key
        -subj "{{ hardenwebserver_certinfo }}/CN={{ certificate_cn }}" 
        -out {{ ssl_dir }}/{{ ansible_fqdn }}.csr
        creates={{ ssl_dir }}/{{ ansible_fqdn }}.csr

## https://letsencrypt.org/certificates/
- name: create root chain file for ssl stapling
  shell: >
    curl https://letsencrypt.org/certs/isrgrootx1.pem
        https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem
        https://letsencrypt.org/certs/lets-encrypt-x4-cross-signed.pem | tee {{ ssl_dir }}/ca-certs.pem > /dev/null
    creates={{ ssl_dir }}/ca-certs.pem

- name: register letsencrypt challenge
  letsencrypt:
    account_key: "{{ ssl_privatedir }}/user.key"
    csr: "{{ ssl_dir }}/{{ ansible_fqdn }}.csr"
    dest: "{{ ssl_dir }}/{{ ansible_fqdn }}.crt"
    acme_directory: "{{ hardenwebserver_letsencrypt_acme_dir }}"
  register: le_challenge

#- debug: var=le_challenge
- name: ensure letsencrypt directory exists
  file: "dest={{ hardenwebserver_rootdir }}/.well-known/acme-challenge state=directory mode=0755"
- name: add public file to www dir to fullfill letsencrypt challenge
  copy:
     dest: "{{ hardenwebserver_rootdir }}/{{ le_challenge['challenge_data'][ certificate_cn ]['http-01']['resource'] }}"
     content: "{{ le_challenge['challenge_data'][ certificate_cn ]['http-01']['resource_value'] }}"
  when: le_challenge|changed

- meta: flush_handlers
- name: ensure nginx is up for letsencrypt validation
  service: name=nginx state=started

- debug: msg="http://{{ jitsi_meet_server_name }}/{{ le_challenge['challenge_data'][ certificate_cn ]['http-01']['resource'] }}"
- name: Wait for link to be up before proceeding.
  shell: "curl -v --max-time 5 http://{{ jitsi_meet_server_name }}/{{ le_challenge['challenge_data'][ certificate_cn ]['http-01']['resource'] }}"
  register: result
  until: (result.stdout.find("HTTP/1.1 200 OK") == -1)
  retries: 10
  delay: 3
  changed_when: false

## Note: validation is over http... can't remove http before this task.
- name: validate letsencrypt challenge
  letsencrypt:
    account_key: "{{ ssl_privatedir }}/user.key"
    csr: "{{ ssl_dir }}/{{ ansible_fqdn }}.csr"
    dest: "{{ ssl_dir }}/{{ ansible_fqdn }}.crt"
    data: "{{ le_challenge }}"
    acme_directory: "{{ hardenwebserver_letsencrypt_acme_dir }}"

